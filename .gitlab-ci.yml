image: docker:latest

variables:
  DOCKER_IMAGE: docker:28.1.1-dind
  IMAGE_NAME: $CI_REGISTRY_IMAGE
  TEST_TAG: "$IMAGE_NAME:testing"
  LATEST_TAG: "$IMAGE_NAME:latest"
  VERSION_TAG: "$IMAGE_NAME:$CI_COMMIT_TAG"
  DOCKER_TLS_CERTDIR: "/certs"

stages:
  - docker image build
  - docker image test
  - docker image push registry
  - docker image test push registry
  - release

.docker_template: &docker_template
  image: $DOCKER_IMAGE
  services:
    - $DOCKER_IMAGE
  tags:
    - dockerimage
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY

docker image build:
  <<: *docker_template
  stage: docker image build
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_TAG
  script:
    - docker build -t $TEST_TAG -f Dockerfile .
    - docker push $TEST_TAG

docker image smoke test:
  <<: *docker_template
  stage: docker image test
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_TAG
  script: docker run --rm --entrypoint sh $TEST_TAG -c 'apk info | grep msmtp && echo "msmtp available"'

docker image sendmail test:
  <<: *docker_template
  stage: docker image test
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_TAG
  script:
  - >
    docker run --rm
    -e SMTP_SERVER=$SMTP_SERVER
    -e SMTP_PORT=587
    -e SMTP_USER=$SMTP_USER
    -e SMTP_PASS="$(echo $SMTP_PASS_BASE64 | base64 -d)"
    -e FROM=$SMTP_USER
    -e TO=$SMTP_TO
    -e SUBJECT="Testmail from alpine-mailutil"
    -e BODY="This message uses SMTP authentication."
    $TEST_TAG


docker image push registry:
  <<: *docker_template
  stage: docker image push registry
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - docker pull $TEST_TAG
    - docker tag $TEST_TAG $LATEST_TAG
    - docker push $LATEST_TAG
    - docker tag $TEST_TAG $VERSION_TAG
    - docker push $VERSION_TAG

docker image test push registry:
  <<: *docker_template
  stage: docker image test push registry
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - docker pull $LATEST_TAG
    - docker run --rm $LATEST_TAG sh -c 'echo "Pushed image works."'

release job:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - echo "Releasing tag $CI_COMMIT_TAG"
  release:
    tag_name: "$CI_COMMIT_TAG"
    description: "Release for $CI_COMMIT_TAG"
