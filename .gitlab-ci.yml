image: docker:latest

variables:
  DOCKER_IMAGE: docker:28.1.1-dind
  IMAGE_NAME: $CI_REGISTRY_IMAGE
  TEST_TAG: "$IMAGE_NAME:testing"
  LATEST_TAG: "$IMAGE_NAME:latest"
  VERSION_TAG: "$IMAGE_NAME:$CI_COMMIT_TAG"
  DOCKER_TLS_CERTDIR: "/certs"

stages:
  - docker image build
  - docker image test
  - docker image push registry
  - update readme with versions
  - docker image test push registry
  - generate release notes
  - release

.docker_template: &docker_template
  image: $DOCKER_IMAGE
  services:
    - $DOCKER_IMAGE
  tags:
    - dockerimage
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY

docker image build:
  <<: *docker_template
  stage: docker image build
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_TAG
    - if: '$FORCE_TEST == "true"'
  script:
    - docker build -t $TEST_TAG -f Dockerfile .
    - docker push $TEST_TAG

docker image smoke test:
  <<: *docker_template
  stage: docker image test
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_TAG
    - if: '$FORCE_TEST == "true"'
  script: docker run --rm --entrypoint sh $TEST_TAG -c 'apk info | grep msmtp && echo "msmtp available"'

docker image sendmail test:
  <<: *docker_template
  stage: docker image test
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_TAG
    - if: '$FORCE_TEST == "true"'
  script:
    - >
      docker run --rm
      -e SMTP_SERVER=$SMTP_SERVER
      -e SMTP_PORT=587
      -e SMTP_USER=$SMTP_USER
      -e SMTP_PASS="$(echo $SMTP_PASS_BASE64 | base64 -d)"
      -e FROM=$SMTP_USER
      -e TO=$SMTP_TO
      -e SUBJECT="Testmail from alpine-mailutil"
      -e BODY="This is a test message with symbols üòäüëç‚ùå‚òëÔ∏è‚úÖ"
      $TEST_TAG

docker image sendmail from file test:
  <<: *docker_template
  stage: docker image test
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_TAG
    - if: '$FORCE_TEST == "true"'
  script:
    - echo "This is a test message with symbols üòäüëç‚ùå‚òëÔ∏è‚úÖ" > body.txt
    - >
      docker run --rm
      -v "$CI_PROJECT_DIR/body.txt:/tmp/body.txt:ro"
      -e SMTP_SERVER=$SMTP_SERVER
      -e SMTP_PORT=587
      -e SMTP_USER=$SMTP_USER
      -e SMTP_PASS="$(echo $SMTP_PASS_BASE64 | base64 -d)"
      -e FROM=$SMTP_USER
      -e TO=$SMTP_TO
      -e SUBJECT="Testmail from alpine-mailutil"
      -e BODY_FILE="/tmp/body.txt"
      $TEST_TAG

docker image push registry:
  <<: *docker_template
  stage: docker image push registry
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - docker pull $TEST_TAG
    - docker tag $TEST_TAG $LATEST_TAG
    - docker push $LATEST_TAG
    - docker tag $TEST_TAG $VERSION_TAG
    - docker push $VERSION_TAG

docker image test push registry:
  <<: *docker_template
  stage: docker image test push registry
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - docker pull $LATEST_TAG
    - docker run --rm --entrypoint sh $LATEST_TAG -c 'echo "Pushed image works."'

generate release notes:
  stage: generate release notes
  <<: *docker_template
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - docker pull $VERSION_TAG
    - docker create --name extract-container $VERSION_TAG
    - docker cp extract-container:/version.txt ./version.txt
    - docker rm extract-container
    - echo "### Image Versions" > release.md
    - echo "\`\`\`" >> release.md
    - cat version.txt >> release.md
    - echo "\`\`\`" >> release.md
  artifacts:
    paths:
      - version.txt
      - release.md

update readme with versions:
  stage: release
  <<: *docker_template
  needs:
    - job: generate release notes
      artifacts: true
  rules:
    - if: $CI_COMMIT_TAG
  before_script:
    - apk add --no-cache git
    - git config --global user.name "GitLab CI"
    - git config --global user.email "gitlab@hl-dev.de"
    - git remote set-url origin https://$GITLAB_USER:$GITLAB_TOKEN@gitlab.hl-dev.de/$CI_PROJECT_PATH.git
  script:
    # Create formatted version block
    - git fetch origin main
    - git checkout main

    - echo "### üß± Version ${CI_COMMIT_TAG}" > new_version_block.md
    - awk '{ print "- " $0 }' version.txt >> new_version_block.md
    - echo "" >> new_version_block.md

    # Insert after VERSION_START block
    - |
      awk '
      BEGIN { inserted=0 }
      {
      print
      if ($0 ~ /<!-- VERSION_START -->/ && !inserted) {
      while ((getline line < "new_version_block.md") > 0) print line
      inserted = 1
      }
      }' README.MD > README.new && mv README.new README.MD
    - cat README.MD
    # Commit and push changes
    - git add README.MD
    - >
      git commit -m "chore: update image versions in README for $CI_COMMIT_TAG"
    - git pull origin main

release job:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - echo "Publishing release for tag $CI_COMMIT_TAG"
  release:
    tag_name: "$CI_COMMIT_TAG"
    description: "$(cat release.md)"
